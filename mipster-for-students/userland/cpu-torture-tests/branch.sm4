#  ===========================================================================
#  COPYRIGHT (c) 2008 Zeljko Vrba <zvrba.external@zvrba.net>
# 
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#  ===========================================================================
#
# Included as part of cputorture.sm4.  Tests branching + delay slots.
#

		move	R(2), R(0)
		j		t_j
		addi	R(2), R(0), 7		# add 7 in branch slot
		break	2					# should never be reached

t_j:
.globl t_j
		addi	R(2), R(2), -7		# subtract 7 to get 0
		bne		R(2), R(0), B2		# branch if != 0
		nop							# branch slot

t_jal:
.globl t_jal
		li		R(2), 11
		jal		t_link				# call subroutine
		addi	R(2), R(2), 1		# branch slot; add 1 to get R(2)==12
		addi	R(2), R(2), 1		# executed after return, set R(2) to 14
		li		R(3), 14
		bne		R(2), R(3), B2
		nop							# branch slot

t_jalr:
.globl t_jalr
		li		R(2), 11			# same as above, but with jalr
		la		R(4), t_link		# to test indirect call
		jalr	R(31), R(4)			# test explicit store of retaddr
		addi	R(2), R(2), 1		# branch slot; sets R(2)==12
		addi	R(2), R(2), 1		# executed after return, set R(2) to 14
		li		R(3), 14
		bne		R(2), R(3), B2
		nop							# branch slot
		j		t_beq				# continue execution
		nop							# branch slot
		
t_link:
.globl t_link
		li		R(3), 12			# Entered with R(2)==12
		bne		R(2), R(3), B2		# Branch if not equal
		jr		R(31)				# Return
		addi	R(2), R(2), 1		# Branch slot: set R(2) to 13
		break	2					# Should never be executed

		# Test forward jumps, backward jumps (bltzal/bgtzal to t_link)
		# and branch slots.

t_beq:
.globl t_beq
		li		R(3), 1
		beq		R(3), R(0), B2		# Not equal, should NOT branch
		xor		R(2), R(2), R(2)	# Set to 0
		beq		R(0), R(2), t_bne	# Equal, SHOULD branch
		addi	R(2), R(2), 1
		break	2

t_bne:
.globl t_bne
		bne		R(0), R(0), B2		# equal, should NOT branch
		nop			  				# branch slot
		bne		R(2), R(3), B2		# must be 1
		addi	R(3), R(3), 1
		bne		R(2), R(0), t_blez	# not equal, SHOULD branch
		addi	R(2), R(2), 1
		break	2

t_blez:
.globl t_blez
		bne		R(2), R(3), B2		# did last branch slot got executed?
		li		R(4), -1
		blez	R(4), 1f			# R(4) < 0, should be taken
		addi	R(4), R(4), 2		# set R(4) to +1 in branch slot
		break	2
1:		blez	R(4), B2			# R(4)==1, should not be taken
		addi	R(4), R(4), -1		# set R(4) to 0
		blez	R(4), t_bltz		# should be taken
		addi	R(4), R(4), 1		# set R(4) to 1
		break	2

t_bltz:
.globl t_bltz
		bltz	R(4), B2			# should not branch as R(4)==+1
		addi	R(4), R(4), -1		# set R(4)==0
		bltz	R(4), B2			# should not branch (as 0 < 0 == false)
		addi	R(4), R(4), -1		# set R(4) to -1
		bltz	R(4), t_bltzal		# must branch
		addi	R(4), R(4), 1		# set to 0 in branch slot
		break	2

t_bltzal:
.globl t_bltzal
		bne		R(4), R(0), B2
		addi	R(4), R(4), 1		# set R(4) to 1
		bltzal	R(4), B2			# should not branch as R(4)==+1
		addi	R(4), R(4), -1		# set R(4) to 0
		li		R(2), 11
		bltzal	R(4), B2			# should not branch as R(4)==0
		addi	R(4), R(4), -1		# set R(4) to -1
		li		R(2), 11
		bltzal	R(4), t_link		# should branch as R(4)==-1
		addi	R(2), R(2), 1
		addi	R(2), R(2), 1
		addi	R(2), R(2), -14
		bne		R(2), R(0), B2		# R(2) must be 14
		nop

t_bgez:
.globl t_bgez
		li		R(4), -1
		bgez	R(4), B2			# must NOT branch
		addi	R(4), R(4), 1		# set R(4) to 0
		bgez	R(4), 1f			# must branch as R(4)==0
		addi	R(4), R(4), 1		# set R(4) to 1 in branch slot
		break	2
1:		bgez	R(4), t_bgtz		# must branch
		addi	R(4), R(4), 1
		break	2

t_bgtz:
.globl t_bgtz
		bgtz	R(4), 1f			# R(4)==2, must branch
		addi	R(4), R(4), -2		# set R(4)=0
		break	2
1:		bgtz	R(4), B2			# R(4)==0, must not branch
		addi	R(4), R(4), -1
		bgtz	R(4), B2			# R(4)==-1, must not branch
		nop

t_bgezal:
.globl t_bgezal
		li		R(2), 11
		bgezal	R(4), B2			# should not branch as R(4)==-1
		addi	R(4), R(4), 1
		bgezal	R(4), t_link		# should branch as R(4)==0
		addi	R(2), R(2), 1
		addi	R(2), R(2), 1
		addi	R(2), R(2), -14
		bne		R(2), R(0), B2		# R(2) must be 14
		addi	R(4), R(4), 1		# set R(4) to 1
		li		R(2), 11
		bgezal	R(4), t_link		# should branch as R(4)==1
		addi	R(2), R(2), 1
		addi	R(2), R(2), 1
		addi	R(2), R(2), -14
		bne		R(2), R(0), B2		# R(2) must be 14
		nop
