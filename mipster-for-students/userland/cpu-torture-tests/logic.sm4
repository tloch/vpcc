#  ===========================================================================
#  COPYRIGHT (c) 2008 Zeljko Vrba <zvrba.external@zvrba.net>
# 
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#  ===========================================================================
#
# Included as part of cputorture.sm4.  Tests logic operations.
#
# Registers are cyclically used to test everything thoroughly.  $23-$25 should
# not be used by tests as macros already use them, $26-$27 should be avoided
# for compatibility with other simulators.
#

		.text

		# Bit operations with zero-extended immediate.

		t_alui(andi, $21, $22, 0x12345678, 0xFFFF, 0x00005678)
		t_alui(ori,  $28, $29, 0x12345678, 0xA001, 0x1234F679)
		t_alui(xori, $30, $31, 0x12345678, 0xFFFF, 0x1234A987)

		# Bit operations on two registers.

		t_alu3(and, $8, $9, $10,   0x12345678, 0xFFFFFFFF, 0x12345678)
		t_alu3(or,  $11, $12, $13, 0x12345678, 0xA001100A, 0xB235567A)
		t_alu3(xor, $14, $15, $16, 0x12345678, 0xFFFFFFFF, 0xEDCBA987)
		t_alu3(nor, $17, $18, $19, 0x12345678, 0x11111111, 0xECCAA886)

		# Shifts with immediate count.

		t_alui(sll, $2, $3, 0x40000000, 0x01, 0x80000000)
		t_alui(sll, $4, $5, 0x80000000, 0x01, 0x00000000)
		t_alui(sll, $6, $7, 0x00000002, 0x04, 0x00000020)

		t_alui(srl, $8,  $9,  0x40000000, 0x04, 0x04000000)
		t_alui(srl, $10, $11, 0x00000002, 0x01, 0x00000001)
		t_alui(srl, $12, $13, 0x00000001, 0x01, 0x00000000)

		t_alui(sra, $14, $15, 0x40000000, 0x04, 0x04000000)
		t_alui(sra, $16, $17, 0x80000000, 0x01, 0xC0000000)
		t_alui(sra, $18, $19, 0xF0000000, 0x01, 0xF8000000)

		# Shifts with variable count (in register).

		t_alu3(sllv, $20, $21, $22, 0x40000000, 0x01, 0x80000000)
		t_alu3(sllv, $28, $29, $30, 0x80000000, 0x01, 0x00000000)
		t_alu3(sllv, $31, $2,  $3,  0x00000002, 0x04, 0x00000020)
		t_alu3(sllv, $4,  $5,  $6,  0x00000002, 0xC4, 0x00000020)

		t_alu3(srlv, $7,  $8,  $9,  0x40000000, 0xC4, 0x04000000)
		t_alu3(srlv, $10, $11, $12, 0x40000000, 0x04, 0x04000000)
		t_alu3(srlv, $13, $14, $15, 0x00000002, 0x01, 0x00000001)
		t_alu3(srlv, $16, $17, $18, 0x00000001, 0x01, 0x00000000)

		t_alu3(srav, $19, $20, $21, 0x40000000, 0xC4, 0x04000000)
		t_alu3(srav, $22, $28, $29, 0x40000000, 0x04, 0x04000000)
		t_alu3(srav, $30, $31, $2,  0x80000000, 0x01, 0xC0000000)
		t_alu3(srav, $3,  $4,  $5,  0xF0000000, 0x01, 0xF8000000)

		# Comparison predicates with sign-extended immediate operand.
		
		t_alui(slti, $6,  $7,  0x12345678, 0x1234, 0)			# +/+, >
		t_alui(slti, $8,  $9,  0x00001234, 0x1234, 0)			# +/+, =
		t_alui(slti, $10, $11, 0x00001234, 0x5678, 1)			# +/+, <
		t_alui(slti, $12, $13, 0x12345678, 0x8000, 0)			# +/-
		t_alui(slti, $14, $15, 0xFFFFFFFF, 0x0001, 1)			# -/+
		t_alui(slti, $16, $17, 0xFFFFFFFF, 0x8000, 0)			# -/-, >
		t_alui(slti, $18, $19, 0xFFFFFFFF, 0xFFFF, 0)			# -/-, =
		t_alui(slti, $20, $21, 0x80000000, 0xFFFF, 1)			# -/-, <

		t_alui(sltiu, $22, $28, 0x12345678, 0x1234, 0)			# +/+, >
		t_alui(sltiu, $29, $30, 0x00001234, 0x1234, 0)			# +/+, =
		t_alui(sltiu, $31, $2,  0x00001234, 0x5678, 1)			# +/+, <
		t_alui(sltiu, $3,  $4,  0x12345678, 0x8000, 1)			# +/-
		t_alui(sltiu, $5,  $6,  0xFFFFFFFF, 0x0001, 0)			# -/+
		t_alui(sltiu, $7,  $8,  0xFFFFFFFF, 0x8000, 0)			# -/-, >
		t_alui(sltiu, $9,  $10, 0xFFFFFFFF, 0xFFFF, 0)			# -/-, =
		t_alui(sltiu, $11, $12, 0x80000000, 0xFFFF, 1)			# -/-, <

		# 3-registed comparison predicates.

		t_alu3(slt, $4,  $5,  $6,  0x12345678, 0x02345678, 0)	# +/+, >
		t_alu3(slt, $7,  $8,  $9,  0x12345678, 0x12345678, 0)	# +/+, =
		t_alu3(slt, $9,  $10, $11, 0x12345678, 0x23456789, 1)	# +/+, <
		t_alu3(slt, $12, $13, $14, 0x12345678, 0x80000000, 0)	# +/-
		t_alu3(slt, $15, $16, $17, 0x80000000, 0x12345678, 1)	# -/+
		t_alu3(slt, $17, $18, $19, 0xFFFFFFFF, 0x80000000, 0)	# -/-, >
		t_alu3(slt, $20, $21, $22, 0x90000000, 0x90000000, 0)	# -/-, =
		t_alu3(slt, $28, $29, $30, 0x90000000, 0xF0000000, 1)	# -/-, <

		t_alu3(sltu, $4,  $5,  $6,  0x12345678, 0x02345678, 0)	# +/+, >
		t_alu3(sltu, $7,  $8,  $9,  0x12345678, 0x12345678, 0)	# +/+, =
		t_alu3(sltu, $9,  $10, $11, 0x12345678, 0x23456789, 1)	# +/+, <
		t_alu3(sltu, $12, $13, $14, 0x12345678, 0x80000000, 1)	# +/-
		t_alu3(sltu, $15, $16, $17, 0x80000000, 0x12345678, 0)	# -/+
		t_alu3(sltu, $17, $18, $19, 0xFFFFFFFF, 0x80000000, 0)	# -/-, >
		t_alu3(sltu, $20, $21, $22, 0x90000000, 0x90000000, 0)	# -/-, =
		t_alu3(sltu, $28, $29, $30, 0x90000000, 0xF0000000, 1)	# -/-, <
